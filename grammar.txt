statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement	: KEYWORD:return expr?
			: KEYWORD:continue
			: KEYWORD:break
			: expr

expr  	    : KEYWORD:var IDENTIFIER EQ expr
			: comp-expr ((KEYWORD:and|KEYWORD:or) comp-expr)*

comp-expr	: not comp-expr
			: arith-expr ((IS|ISNOT|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term    	: factor ((MUL|DIV) factor)*

factor  	: (PLUS|MINUS)* factor
			: power

power   	: atom ((POW) factor)*

atom		: INT|FLOAT|STR|LIST|IDENTIFIER
			: LPAREN expr RPAREN
			: if-expr
			: while-expr
			: for-expr

func-expr	: KEYWORD:def IDENTIFIER LPAREN (IDENTIFIER (comma IDENTIFIER)*)? RPAREN COLON statements

if-expr		: KEYWORD:if expr KEYWORD:then statements 
			  (KEYWORD:else statements)? KEYWORD:fi

while-expr  : KEYWORD:while expr KEYWORD:then statements KEYWORD:end

for-expr	: KEYWORD:for KEYWORD:var IDENTIFIER KEYWORD:in expr KEYWORD:then statements KEYWORD:end
